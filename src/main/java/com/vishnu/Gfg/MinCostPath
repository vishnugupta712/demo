import java.util.ArrayList;
import java.util.List;

//TC O(n*m)
//SC O(n*m)

class GfG {
  
    static int minCost(List<List<Integer>> cost) {
      
        int m = cost.size();
        int n = cost.get(0).size();
        int[][] dp = new int[m][n];

        // Initialize the base cell
        dp[0][0] = cost.get(0).get(0);

        // Fill the first row
        for (int j = 1; j < n; j++) {
            dp[0][j] = dp[0][j - 1] + cost.get(0).get(j);
        }

        // Fill the first column
        for (int i = 1; i < m; i++) {
            dp[i][0] = dp[i - 1][0] + cost.get(i).get(0);
        }

        // Fill the rest of the dp table
        for (int i = 1; i < m; i++) {
            for (int j = 1; j < n; j++) {
                dp[i][j] = cost.get(i).get(j) 
                   + Math.min(dp[i - 1][j], 
                     Math.min(dp[i][j - 1], dp[i - 1][j - 1]));
            }
        }

        // Minimum cost to reach the bottom-right cell
        return dp[m - 1][n - 1];
    }

    public static void main(String[] args) {
      
        List<List<Integer>> cost = new ArrayList<>();
        cost.add(List.of(1, 2, 3));
        cost.add(List.of(4, 8, 2));
        cost.add(List.of(1, 5, 3));

        System.out.println(minCost(cost));
    }
}
